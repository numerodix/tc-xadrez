= A solution in two parts

Problem statement:
We wish to generate all possible boards (board configurations) using a board of
dimensions 7x7 and the pieces 2 Kings, 2 Queens, 2 Bishops, 1 Knight.

A board where no piece can reach any other piece is said to be valid. We wish
to discover all valid boards only, not all boards in general.

The problem can be split into two steps:

1) Generate all possible boards.
2) Filter these against a validity test.


== Generating all possible boards

Let's start with an example board containing a few pieces:

-------
|K|.|K|
-------
|.|.|.|
-------
|.|R|.|
-------

King (K)
Rook (R)
Queen (Q)
Knight (N)
Bishop (B)

Dots mark reachability, namely cells that are reachable by some piece. On this
board all empty cells (ie. cells not containing a piece) are reachable, but
none of the pieces are reachable by any of the other pieces. This means two
things:

1) The board is valid.
2) The board is full in the sense that no other piece may be placed without
violating the unreachability condition.


Let's now consider what it means to generate all possible boards using a given
set of pieces. From the example we can see that:

1) A type of piece is interchangeable with itself, ie. a board which contains a
King at 0,0 and another King at 2,0 is the same board as if the two kings
swapped places. Another way of expressing this is: pieces don't have identity.
We're not interested in "which" king is where, merely "where the kings are" -
one king is as good as another.

2) The same holds true for empty cells.


To simplify the problem, we can represent a 2 dimensional board as an array.
We store the cells as if they were contiguous in memory like so:

   -------- row 1 --------   ------- row 2 --------   -------- row 3 -------
[  (0, 0) , (1, 0), (2, 0),  (0, 1), (1, 1), (2, 1),  (0, 2), (1, 2), (2, 2)  ]

The contents of the array would then be (dash means empty cell):

[  K,       -,      K,       -,      -,      -,       -,      R,      -       ]

Or more compactly:

K-K----R-

The problem of generating all possible boards using the pieces (K, K, R) can
now be expressed as the problem of generating all possible 9 character
sequences (since there are 9 cells on the board) using a combination of (2 * K,
1 * R, 6 * -) such that each sequence is unique.

More generally, the problem of generating all possible boards given pieces P
can be expressed as that of generating all possible sequences of the pieces in
P, where each piece appears as many times as in P and the rest of the cells on
the board represented by a dash (empty cell).


NOTE: After much staring at example sequences on the whiteboard I cannot seem
to figure out the pattern needed to generate the sequences we want such that we
only generate distinct sequences. Nor can I figure out how to analyze the size
of the result of this function. What we are looking for is not the standard
permutations (as in math), because that does not produce a distinct collection
of sequences.

What we are looking for is a function that does essentially the following:

    set( math.permutations('KKR------') )

But without generating all the duplicates in the first place.


== Modeling the board

A model of the board that checks for validity is implemented (with tests and
all). What's missing is a generator (from step 1 above) that would generate all
the boards, which we would plug into this model to filter out the invalid ones.
